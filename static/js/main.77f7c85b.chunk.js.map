{"version":3,"sources":["Popup.js","App.js","serviceWorker.js","index.js"],"names":["Popup","react_default","a","createElement","className","this","props","text","Component","require","Paper","Rect","Text","ARROW_KEY_LEFT","ARROW_KEY_UP","ARROW_KEY_RIGHT","ARROW_KEY_DOWN","CONTINUE","Position","x","y","Object","classCallCheck","Snake","pos","position","push","width","height","Food","Math","round","random","Direction","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","snakeData","foodData","directionData","score","out","setInitialState","tempWidth","tempHeight","tempFoodData","setState","print","length","console","log","i","snakeCollisionHappnenedOrNot","snakeTempData","snakeHitWallOrNot","foodEatenOrNot","temp","delta_x","delta_y","distance","sqrt","count","lengthOfSnake","tempDirectionX","tempDirectionY","snakeUpdateFunction","keyPressHandler","e","keyValue","keyCode","tempDirData","document","addEventListener","setInterval","finalRender","gameOut","attr","fill","id","toString","font-size","src_Popup_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77f7c85b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Popup.css'\r\n\r\nclass Popup extends ComponentÂ {\r\n  render() {\r\n    return (\r\n      <div className='popup'>\r\n        <div className='popup_inner'>\r\n          <h2>{this.props.text}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  Popup;","import React, { Component } from 'react';\nimport './App.css';\nimport Popup from './Popup.js'\n\nconst {Paper,Rect,Text} = require('react-raphael');\n\nconst ARROW_KEY_LEFT = 37;\nconst ARROW_KEY_UP = 38;\nconst ARROW_KEY_RIGHT = 39;\nconst ARROW_KEY_DOWN = 40;\nconst CONTINUE = 89;\n\n//Position class contains snake's position in terms of its X and Y Coordinates .\nclass Position{    \n    constructor( x , y){\n        this.x = x;\n        this.y = y;\n    }\n}\n\n//Snake's position related information is stored here . it contains list of position Object.\nclass Snake{\n    constructor(){\n        this.pos = [];\n        var position = new Position(0,0);\n        this.pos.push(position);\n        this.width=10;\n        this.height =10;\n    }\n    \n}\n\n//Food class has info related to position where food needs to appear .\nclass Food{\n    constructor(width,height){\n        this.x=Math.round((Math.random()*this.width));\n        this.y =Math.round((Math.random()*this.height));\n    }\n}\n\n//Direction class is responsible for direction in which snake needs to move .\nclass Direction{\n    constructor(){\n        this.x=1;\n        this.y=0;\n    }\n}\n\n\n//Main class responsible for rendering graphics for snake game .\nclass App extends Component {\n    \n    state = {\n        snakeData : new Snake(),\n        foodData : new Food(),\n        directionData : new Direction(),\n        score : 0,\n        out :false\n    }\n\n//initialises the state variables \n    setInitialState = () => {\n        var tempWidth = Math.round(Math.random()*this.width);\n        var tempHeight = Math.round(Math.random()*this.height);\n        var tempFoodData = new Food(); tempFoodData.x=tempWidth;tempFoodData.y=tempHeight;\n        this.setState({\n        snakeData : new Snake(),\n        foodData : tempFoodData,\n        directionData : new Direction(),\n        score : 0,\n        out : false\n    });\n    }\n\n    \n//constuctor for initialising width and height of canvas \n    constructor(){\n        super();\n        //Height and width of the Canvas , could be modified to change the resolution of the canvas .\n        this.height = 500;\n        this.width = 500;\n    }\n    //added for debugging purpose to print snake's coordinates in canvas .\n    print = () => {\n        var length = this.state.snakeData.pos.length;\n        console.log(\"length of Snake  = \" + length)\n        console.log(\"direction X = \" + this.state.directionData.x + \" directionY = \" + this.state.directionData.y);\n        for(var i =0 ;i <length ; i++){\n            console.log(\"position i \" + i + \" XCoord: \" +this.state.snakeData.pos[i].x + \" YCoord: \"+ this.state.snakeData.pos[i].y );\n        }\n    }\n\n//checks whether any collision happens within the snake or not  if Yes resets the entire state variables.\n    snakeCollisionHappnenedOrNot = (snakeTempData) => {\n        var length = snakeTempData.pos.length;\n        var position = new Position(snakeTempData.pos[length-1].x,snakeTempData.pos[length-1].y);\n        for(var i=0;i<length-1;i++){\n            if(snakeTempData.pos[i].x == position.x && snakeTempData.pos[i].y == position.y ){\n                this.setState({out:true});\n            }\n        }\n        \n        \n    }\n    \n//to check whether snake has hit the wall which is specified by height and width of canvas .\n  snakeHitWallOrNot = (snakeTempData) => {\n      var length = snakeTempData.pos.length;\n        for(var i=0;i<length;i++){\n            if(snakeTempData.pos[i].x > this.width || snakeTempData.pos[i].x < 0 ||  snakeTempData.pos[i].y > this.height || snakeTempData.pos[i].y < 0 ){\n                this.setState({out:true});\n                \n            }\n        }\n      \n  }\n\n//checks whether food is eaten or not , if yes , increases snake size.\n    foodEatenOrNot = () => {\n        var temp = this.state.snakeData;\n        var tempFoodData = this.state.foodData;\n        var delta_x = temp.pos[temp.pos.length -1 ].x-tempFoodData.x;\n        var delta_y = temp.pos[temp.pos.length -1 ].y-tempFoodData.y;\n        var distance = Math.sqrt(delta_x*delta_x + delta_y*delta_y);\n        this.count++;\n\n        if(distance <= 10){\n            this.setState({score:this.state.score+1});\n                var lengthOfSnake = temp.pos.length;\n                 var pos = new Position(temp.pos[lengthOfSnake-1].x,temp.pos[lengthOfSnake-1].y);\n                var tempDirectionX = this.state.directionData.x;\n                var tempDirectionY = this.state.directionData.y;\n             if(tempDirectionX == 1 && tempDirectionY == 0 ){\n                    pos.x=pos.x+10;\n                }else if(tempDirectionX == 0 && tempDirectionY == 1){\n                    pos.y=pos.y+10;\n                }else if(tempDirectionX == -1 && tempDirectionY == 0){\n                    pos.x=pos.x-10;\n                }else {\n                    pos.y=pos.y-10;\n                }\n            \n            temp.pos.push(new Position(pos.x,pos.y));\n           \n            this.setState({snakeData : temp});\n            var tempWidth = Math.round(Math.random()*this.width);\n            var tempHeight = Math.round(Math.random()*this.height);\n             tempFoodData = new Food(); tempFoodData.x=tempWidth;tempFoodData.y=tempHeight;\n            this.setState({foodData : tempFoodData});\n\n            \n        }\n        \n    }\n\n//main function responsible for updating snake's position for every given interval .\n    snakeUpdateFunction = () =>{\n        if(!this.state.out){\n                var tempDirectionX = this.state.directionData.x;\n                var tempDirectionY = this.state.directionData.y;\n                 var temp = this.state.snakeData;\n                var i;\n               for(i =0;i<temp.pos.length-1;i++){\n                    temp.pos[i].x =  temp.pos[i+1].x;\n                   temp.pos[i].y =  temp.pos[i+1].y;\n               }\n            \n             if(tempDirectionX == 1 && tempDirectionY == 0 ){\n                    temp.pos[i].x=temp.pos[i].x+10;\n                }else if(tempDirectionX == 0 && tempDirectionY == 1){\n                    temp.pos[i].y=temp.pos[i].y+10;\n                }else if(tempDirectionX == -1 && tempDirectionY == 0){\n                    temp.pos[i].x=temp.pos[i].x-10;\n                }else {\n                    temp.pos[i].y=temp.pos[i].y-10;\n                }\n\n//TODO :  to enable both snake game with and without wall and give user option to switch between the modes .\n                \n//                temp.pos[i].x = temp.pos[i].x%this.width;\n//                temp.pos[i].y = temp.pos[i].y%this.height;\n            \n//                if(temp.pos[i].y <0){\n//                    temp.pos[i].y = this.height+temp.pos[i].y;\n//                }\n//\n//                if(temp.pos[i].x <0){\n//                    temp.pos[i].x = this.width+temp.pos[i].x;\n//                }\n\n                \n              this.setState({snakeData : temp});\n\n             this.foodEatenOrNot();\n            \n            this.snakeHitWallOrNot(temp);\n\n            this.snakeCollisionHappnenedOrNot(temp);\n        }else{\n            this.setState({directionData : new Direction()})\n        }  \n  \n    }\n \n//Main function to start rendering of snake \n    componentDidMount(){\n         document.addEventListener(\"keydown\", this.keyPressHandler);\n        var tempWidth = Math.round(Math.random()*this.width);\n        var tempHeight = Math.round(Math.random()*this.height);\n        var tempFoodData = new Food(); tempFoodData.x=tempWidth;tempFoodData.y=tempHeight;\n        this.setState({foodData : tempFoodData});\n        setInterval(this.snakeUpdateFunction,70);\n        \n            \n    }\n\n//to detect key presses for direction keys and update the direction of snake to move.\n    keyPressHandler = (e) => {\n        var keyValue = e.keyCode;\n        var tempDirData = this.state.directionData;\n        \n        switch(keyValue){\n            case ARROW_KEY_DOWN : {\n            if(!this.state.out)\n            tempDirData.x =0;tempDirData.y=1;\n             break;   \n            }\n            case ARROW_KEY_LEFT : {\n            if(!this.state.out)\n            tempDirData.x =-1;tempDirData.y=0;\n                break;\n            }\n            case ARROW_KEY_RIGHT : {\n            if(!this.state.out)\n            tempDirData.x =1;tempDirData.y=0;\n                break;\n            }\n            case ARROW_KEY_UP : {\n            if(!this.state.out)                \n            tempDirData.x =0;tempDirData.y=-1;\n                break;\n            }\n            case CONTINUE: {\n               this.setInitialState();\n                break;\n            }\n            default :{\n                console.log(\"failure key clicked = \" + keyValue);\n            }\n            \n        }\n        this.setState({directionData : tempDirData});\n        \n        \n        \n    }\n\n  render() {\n\n      var finalRender = [];\n      var gameOut = this.state.out;\n      var gameOutResult  =[] ;\n      if(gameOut){\n          gameOutResult.push(<p>please press Y to start the game again</p>);\n      }\n     \n      for(var i =0 ; i< this.state.snakeData.pos.length;i++){\n        finalRender.push(<Rect x={this.state.snakeData.pos[i].x%this.width} y={this.state.snakeData.pos[i].y%this.height} width={10} height={10} attr={{\"fill\":\"yellow\"}}/>);    \n      }\n          return (\n        <div>\n        <div id =\"snakeRender\">\n        <Paper width={this.width} height={this.height} attr={{\"fill\":\"red\"}}>\n                         \n        {finalRender}\n      <Rect x={this.state.foodData.x} y={this.state.foodData.y} width={10} height={10} attr={{\"fill\":\"red\"}}/>\n                         \n        <Text x={this.width-50} y={30} text={\"Score : \" + this.state.score.toString()} attr={{\"fill\":\"red\",\"font-size\":\"20px\"}}/>\n                         \n        </Paper>\n        </div>\n        <div>\n            { gameOut == true ? (<Popup text=\"please enter Y to restart the game\"  />) : null }\n        </div>\n       </div>\n    \n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}